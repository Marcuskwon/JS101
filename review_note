str1.concat(str2) - not mutating (same ams str1 + str2)
str1.indexOf(word) if.. no it will be -1
str1.match(letter) -> will return how many (number). You can use regex for letter (/t/g)
str1.padStart(teger length, pad). pad is optional.. default, ' '
********************************************************
console.log(0.3 + 0.6); // 0.899999999999
console.log(0.3 + 0.6 === 0.9); // false //because JavaScript uses floating point numbers for all numeric operations. 
********************************************************


Array.isArray(arr1) true or false
arr1.concat(arr2) - not mutating
arr1.join(' ') - will return a new string
arr.sort((a, b) => a - b ) - mutating...so use [...arr].sort((a, b) => a - b )
********************************************************
let nanArray = [NaN];
console.log(nanArray[0] === NaN);
//cannot use == or === to determine if it is Nan. need to use isNan
********************************************************



obj1.assign({} , obj2) - mutating {} (first)
********************************************************
let arr1 = [{ first: "value1" }, { second: "value2" }, 3, 4, 5];
let arr2 = arr1.slice();
arr2[0].first = 42;
arr1 => [{ first: 42 }, { second: "value2" }, 3, 4, 5]; pass by reference
********************************************************
//Question2 what these two(7,8) will log?

let object = { first: [1] };
let numArray = object["first"]; // pass by reference ..it will afftect "object" 
numArray.push(2);

console.log(numArray); //  => "[1, 2]"
console.log(object); // => { first: [1, 2] }
********************************************************
